function injectScript(fn) {
  const script = document.createElement('script');
  script.textContent = `(${fn})();`;
  document.documentElement.appendChild(script);
  script.remove();
}

// Inject a script into the page to dispatch the Leaflet version
injectScript(function() {
  // Wait for Leaflet to be available
  function dispatchLeaflet() {
    if (window.L && window.L.version) {
      window.dispatchEvent(new CustomEvent('leafletReady', {
        detail: { version: window.L.version }
      }));
    } else {
      setTimeout(dispatchLeaflet, 500);
    }
    let agelLenses = {'AGEL000224-350716A': [0.5985, -35.1212, '0.576', 1.549],
 'AGEL000316-334804A': [0.8183, -33.8012, '0.659', 1.834],
 'AGEL000645-442950A': [1.6859, -44.4973, '0.498', 2.099],
 'AGEL000729-443446A': [1.872, -44.5795, -99, 1.009],
 'AGEL001310+004004A': [3.2902, 0.6677, '0.693', 2.071],
 'AGEL001424+004145A': [3.6012, 0.696, '0.569', 1.374],
 'AGEL001702-100911A': [4.2564, -10.153, -99, 1.831],
 'AGEL002527+101107A': [6.3643, 10.1853, '0.463^', 2.397],
 'AGEL002700-041324A': [6.7503, -4.2232, '0.495^', 1.465],
 'AGEL003508-252658A': [8.7815, -25.4493, '0.775', -99],
 'AGEL003727-413150A': [9.3628, -41.5305, '0.708', 3.257],
 'AGEL004144-233905A': [10.4341, -23.6515, '0.439', 2.203],
 'AGEL004257-371858A': [10.7388, -37.3162, '0.883', 3.094],
 'AGEL004827+031117A': [12.1134, 3.1881, '0.357^', 2.367],
 'AGEL010128-334319A': [15.366, -33.722, '0.581', 1.167],
 'AGEL010158-491738A': [15.4918, -49.2939, -99, 2.632],
 'AGEL010238+015857A': [15.6596, 1.9824, '0.867', 1.816],
 'AGEL010257-291122A': [15.7395, -29.1894, '0.273^', 0.815],
 'AGEL011759-052718A': [19.4948, -5.4549, '0.579', 2.066],
 'AGEL012429-291856A': [21.1189, -29.3156, -99, 1.606],
 'AGEL012453-144303A': [21.2211, -14.7174, '0.478', 1.825],
 'AGEL013003-374458A': [22.512, -37.7494, -99, 2.282],
 'AGEL013355-643413A': [23.4777, -64.5703, '0.326', 2.093],
 'AGEL013442+043350A': [23.6765, 4.5639, '0.551^', 1.568],
 'AGEL013442+043350B': [23.6765, 4.5639, '0.551^', 2.031],
 'AGEL013639+000818A': [24.1631, 0.1384, '0.344', 2.629],
 'AGEL013719-083056A': [24.3285, -8.5155, '0.563', 2.997],
 'AGEL014106-171324A': [25.2756, -17.2233, '0.609', 2.436],
 'AGEL014235-164818A': [25.6457, -16.8049, '0.619', 2.309],
 'AGEL014253-183116A': [25.7203, -18.5211, '0.637', 2.47],
 'AGEL014327-085021A': [25.8622, -8.8392, '0.737', 2.755],
 'AGEL014504-045551A': [26.2679, -4.9308, '0.635', 1.96],
 'AGEL014556+040229A': [26.4848, 4.0414, '0.784', 2.361],
 'AGEL015009-030438A': [27.5379, -3.0773, -99, 1.39],
 'AGEL015153-144825A': [27.9723, -14.8069, -99, 2.258],
 'AGEL015643-101100A': [29.178, -10.1834, -99, 2.486],
 'AGEL020613-011417A': [31.5561, -1.2382, '0.714^', 1.303],
 'AGEL020707-272645A': [31.7777, -27.4458, -99, 1.679],
 'AGEL020707-272645B': [31.7777, -27.4458, -99, 1.677],
 'AGEL021225-085211A': [33.1051, -8.8697, '0.759^', 2.202],
 'AGEL022709-471856A': [36.7873, -47.3155, '0.603', -99],
 'AGEL022931-290816A': [37.3791, -29.1379, '0.857', 1.679],
 'AGEL023211+001339A': [38.0468, 0.2276, '0.893', 2.366],
 'AGEL024303-000600A': [40.7627, -0.1001, '0.367^', 1.729],
 'AGEL024303-000600B': [40.7627, -0.1001, '0.367^', 0.506],
 'AGEL024605-060739A': [41.5205, -6.1275, -99, 2.73],
 'AGEL025052-552412A': [42.7178, -55.4032, '0.722', 2.478],
 'AGEL025220-473238A': [43.0828, -47.5438, '0.494', -99],
 'AGEL033203-132510A': [53.0106, -13.4195, -99, 2.335],
 'AGEL033203-132510B': [53.0106, -13.4195, -99, 1.433],
 'AGEL033717-315214A': [54.3218, -31.8704, '0.525', 1.955],
 'AGEL034131-513045A': [55.3783, -51.5124, -99, 2.035],
 'AGEL035346-170639A': [58.4427, -17.1109, '0.617', 1.675],
 'AGEL035346-170639B': [58.4427, -17.1109, '0.617', 1.46],
 'AGEL035418-160952A': [58.5761, -16.1645, '0.574', 1.91],
 'AGEL040823-532714A': [62.0944, -53.4539, '0.641', -99],
 'AGEL042439-331742A': [66.1612, -33.2949, '0.564', 1.188],
 'AGEL043806-322852A': [69.5257, -32.4812, '0.343', 0.92],
 'AGEL053724-464702A': [84.3516, -46.784, '0.354', 2.344],
 'AGEL061815+501821A': [94.5639, 50.3059, '0.521', 3.336],
 'AGEL075524+344540A': [118.848, 34.761, '0.722^', 2.635],
 'AGEL080820+103142A': [122.0852, 10.5284, '0.475^', 1.303],
 'AGEL080820+103142B': [122.0852, 10.5284, '0.475^', 1.452],
 'AGEL083930+021025A': [129.8766, 2.1735, -99, 1.769],
 'AGEL084633-015417A': [131.6362, -1.9047, -99, 2.635],
 'AGEL084943+294328A': [132.4294, 29.7244, '0.680^', 2.057],
 'AGEL085331+232155A': [133.38, 23.3652, '0.306', 2.19],
 'AGEL085413-042409A': [133.5531, -4.4026, -99, 2.393],
 'AGEL085917+061517A': [134.8207, 6.2549, -99, 2.658],
 'AGEL090115+095624A': [135.3125, 9.9401, -99, 2.637],
 'AGEL091126+141757A': [137.8568, 14.2991, '0.546^', 1.206],
 'AGEL091905+033639A': [139.7692, 3.6107, '0.444^', 2.193],
 'AGEL091935+303156A': [139.896, 30.5323, '0.427^', 1.812],
 'AGEL092315+182943A': [140.811, 18.4954, '0.873^', 2.418],
 'AGEL093333+091919A': [143.3887, 9.3219, '0.743^', 2.435],
 'AGEL093333+091919B': [143.3887, 9.3219, '0.743^', 2.435],
 'AGEL094328-015453A': [145.8652, -1.9148, '0.450^', 2.125],
 'AGEL094412+322039A': [146.0493, 32.3441, '0.595^', 2.828],
 'AGEL101807-000812A': [154.5307, -0.1368, '0.372^', 1.74],
 'AGEL101847-012132A': [154.6972, -1.359, '0.388^', 1.432],
 'AGEL103027-064109A': [157.6135, -6.6858, '0.468', 1.583],
 'AGEL104041+185052A': [160.1716, 18.8477, '0.314^', 0.879],
 'AGEL104056-010359A': [160.2351, -1.0663, '0.250^', 1.21],
 'AGEL105100-055628A': [162.7508, -5.9411, -99, 1.94],
 'AGEL110154-060232A': [165.4754, -6.0423, '0.483', 1.674],
 'AGEL110245+121111A': [165.6876, 12.1864, '0.925', 2.806],
 'AGEL113929-021826A': [174.8727, -2.3072, -99, 1.553],
 'AGEL114159+191815A': [175.4961, 19.3041, '1.443^', 3.008],
 'AGEL120535+411044A': [181.3975, 41.179, '0.661', 2.658],
 'AGEL123809+150151A': [189.537, 15.0309, '0.572', 1.161],
 'AGEL125146+014256A': [192.9428, 1.7155, '0.74', 1.63],
 'AGEL132304+034319A': [200.7672, 3.7221, '0.353^', 1.016],
 'AGEL133041+044015A': [202.669, 4.6707, '0.336^', 1.169],
 'AGEL133145+513431A': [202.9388, 51.5753, '0.289^', 2.052],
 'AGEL134333+415503B': [205.8869, 41.9176, '0.418^', 2.843],
 'AGEL140839+253104A': [212.1614, 25.5178, '0.663^', 1.289],
 'AGEL142104+002219A': [215.2654, 0.3719, -99, 2.208],
 'AGEL142719-064515A': [216.828, -6.7541, '0.265', 1.513],
 'AGEL144133-005401A': [220.3875, -0.9004, '0.538', 1.667],
 'AGEL144149+144121B': [220.4549, 14.6891, '0.741^', 2.34],
 'AGEL150137+520830A': [225.405, 52.1417, -99, 2.416],
 'AGEL150745+052256A': [226.9381, 5.3823, '0.595^', 2.164],
 'AGEL150745+052256B': [226.9381, 5.3823, '0.595^', 2.591],
 'AGEL150925+390140A': [227.3528, 39.0279, '0.682^', 1.523],
 'AGEL152509+422753A': [231.2874, 42.4646, -99, 2.261],
 'AGEL152560+084639A': [231.4998, 8.7774, '0.602^', 1.951],
 'AGEL153755+144324A': [234.4783, 14.7232, -99, 2.477],
 'AGEL153929+165016A': [234.8707, 16.8379, '0.410^', 1.253],
 'AGEL155417+044339A': [238.5691, 4.7276, '0.778', 1.721],
 'AGEL162300+213721A': [245.7514, 21.6226, '0.758^', 1.728],
 'AGEL162401+012901A': [246.0062, 1.4836, '1.092', 2.367],
 'AGEL165140+280517A': [252.9173, 28.0881, -99, 2.378],
 'AGEL165742+344858A': [254.4235, 34.8162, -99, 2.465],
 'AGEL170944+315417A': [257.4348, 31.9046, -99, 2.119],
 'AGEL171922+244117A': [259.8396, 24.688, '0.529^', 2.279],
 'AGEL172703+110008A': [261.7637, 11.0021, -99, 1.337],
 'AGEL183520+460627A': [278.8338, 46.1076, -99, 3.392],
 'AGEL193558+580909A': [293.9927, 58.1525, '0.577', 3.551],
 'AGEL201419-575701A': [303.5808, -57.9504, '0.717', 2.191],
 'AGEL204312-060954A': [310.802, -6.1649, '0.791', 1.892],
 'AGEL205616-423857A': [314.0659, -42.6492, '0.72', -99],
 'AGEL211005-563931A': [317.5225, -56.6585, '0.5', 1.182],
 'AGEL211243+000921A': [318.1797, 0.1558, '0.445^', 2.36],
 'AGEL211627-594702A': [319.1138, -59.7838, '0.395', 1.412],
 'AGEL212252-005949A': [320.7167, -0.997, '0.349', 0.928],
 'AGEL212326+015312A': [320.8584, 1.8867, '0.591^', 1.18],
 'AGEL212512-650427A': [321.3001, -65.0741, '0.779', 2.223],
 'AGEL213758-012924A': [324.4918, -1.49, '0.273', 1.458],
 'AGEL214915-001252A': [327.3138, -0.2143, '0.453^', 1.945],
 'AGEL215122+134718A': [327.8408, 13.7884, '0.206', 0.89],
 'AGEL215844+025730A': [329.682, 2.9584, '0.287^', 2.081],
 'AGEL221912-434835A': [334.8017, -43.8098, '0.71', 2.168],
 'AGEL222609+004142A': [336.5388, 0.695, '0.647^', 1.896],
 'AGEL224405+275916A': [341.0206, 27.9877, '0.343^', 0.96],
 'AGEL224621+223338A': [341.5882, 22.5605, -99, 2.257],
 'AGEL230305-511502A': [345.7696, -51.2505, '0.514', 2.568],
 'AGEL230522-000212A': [346.3403, -0.0365, '0.492^', 1.838],
 'AGEL231112-454658A': [347.7987, -45.7828, '0.504', 1.555],
 'AGEL231812-110604A': [349.5492, -11.1012, -99, 2.656],
 'AGEL231935+115016A': [349.8938, 11.8378, '0.542', 1.99],
 'AGEL232128-463049A': [350.3682, -46.5137, -99, 1.749],
 'AGEL233459-640407A': [353.7466, -64.0686, '0.701', 2.495],
 'AGEL233552-515218A': [353.9664, -51.8716, '0.566', 2.225],
 'AGEL233610-020735A': [354.0428, -2.1264, '0.494^', 2.663],
 'AGEL234930-511339A': [357.3752, -51.2275, -99, 1.393],
 'AGEL235934+020824A': [359.8897, 2.1399, '0.43', 1.119]};


    let agelLensesKeys = Object.keys(agelLenses);
    // Check if there are multiple source plane lenses and add a dec separation
    for(let i = 0; i < agelLensesKeys.length; i++) {
       if(agelLensesKeys[i].includes('B')) {
           agelLenses[agelLensesKeys[i]][1] += 0.0005; // Add a small offset to DEC for B lenses
       }
    }

    // Add a control to display the AGEL survey information
    // var agelSurveyInfo = window.L.control({'position':'topright'});
    // agelSurveyInfo.onAdd = function (map) {
    //   this._div = window.L.DomUtil.create('div', 'agelSurveyInfo');
    //   this._div.innerHTML = `
    //     <div style="
    //       background: rgba(255,255,255,0.95);
    //       border-radius: 10px;
    //       box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    //       padding: 18px 24px;
    //       min-width: 220px;
    //       font-family: Arial, sans-serif;
    //     ">
    //       <h3 id="agelID" style="
    //         margin-top: 0;
    //         margin-bottom: 10px;
    //         color:rgb(17, 117, 232);
    //         font-size: 1.3em;
    //         letter-spacing: 1px;
    //       "></h3>
    //     </div>
    //   `;
    //   return this._div;
    // };
    // agelSurveyInfo.addTo(window.map);

    // document.getElementById('agelID').innerHTML = ""; // Clear the AGEL survey information control
    // Add all lenses to the map
    for(let i = 0; i < agelLensesKeys.length; i++) {
        RA_agel = agelLenses[agelLensesKeys[i]][0];
        DEC_agel = agelLenses[agelLensesKeys[i]][1];
        var offsets = [0,360,-360];
        for(let offsetID=0; offsetID<offsets.length; offsetID++){

          var clong = map.getCenter().lng + offsets[offsetID];
          var clat = map.getCenter().lat;
          RA_agel_mod = ra2long_C(RA_agel, clong);
          DEC_agel_mod = dec2lat(DEC_agel);

          // Draw a circle marker at the AGEL lens position
          var agelMarker = L.circleMarker([ DEC_agel_mod, RA_agel_mod], {
              radius: 20,
              color: 'rgb(164, 232, 17)',
              fillOpacity: 0,
      
          }).addTo(window.map);
          let makeHTML = `<h3>${agelLensesKeys[i]}</h3>
          <p>RA, DEC: ${RA_agel.toFixed(4)},${DEC_agel.toFixed(4)}</p>
          <p>z(def): ${agelLenses[agelLensesKeys[i]][2]}<br> z(src): ${agelLenses[agelLensesKeys[i]][3]}</p>`;

          agelMarker.bindPopup(makeHTML, {
              maxWidth: 300,
              minWidth: 200,
              closeButton: true,
              autoClose: false,});
        }
    }

    // function agelSearchAndDisplay(){
    //   console.log("AGEL search and display function called");
    //     document.getElementById('agelID').innerHTML = ""; // Clear the AGEL survey information control
    //     // when Enter is hit in the Object name search box
    //       var qstring = $('#objquery').val();
    //       objqueryString = qstring;
    //       var splited = qstring.split(" ");
    //       if (splited.length === 2) {
    //           let RA = splited[0];
    //           let DEC = splited[1];

    //           // Check if input is within the dict agelLenses and display the information
    //           let RA_agel, DEC_agel;
    //           for(let i = 0; i < agelLensesKeys.length; i++) {
    //               RA_agel = agelLenses[agelLensesKeys[i]][0];
    //               DEC_agel = agelLenses[agelLensesKeys[i]][1];

    //               if( Math.abs(RA - RA_agel) < 0.01 && Math.abs(DEC - DEC_agel) < 0.01) {
    //                   let makeHTML = `<h3>${agelLensesKeys[i]}</h3>
    //                   <p>RA: ${RA_agel.toFixed(4)}<br>DEC: ${DEC_agel.toFixed(4)}</p>
    //                   <p>z(def): ${agelLenses[agelLensesKeys[i]][2]}<br>z(src): ${agelLenses[agelLensesKeys[i]][3]}</p>`;
    //                   document.getElementById('agelID').innerHTML =  document.getElementById('agelID').innerHTML + makeHTML;

    //               }
    //           }   
    //       }
    // }
    // document.getElementById('objquery').addEventListener('keydown',agelSearchAndDisplay);
    // window.map.on('zoomend',agelSearchAndDisplay);

  }
  dispatchLeaflet();
});